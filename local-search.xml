<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>对下载软件和文件进行校验的方法</title>
    <link href="/2023/12/20/%E5%AF%B9%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/12/20/%E5%AF%B9%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在windows下使用软件要养成安装之前验证的习惯，现在互联网下载软件&#x2F;文件的时候经常会看到官方提供了一段⌈校验和（checksum）⌋或包含校验和的文件供校验。常见的校验和有 md5、SHA 系列等。还有部分软件&#x2F;文件会提供 GPG 校验文件（signature file, SIG）给下载者进行校验,还有的什么都不提供，只能通过 右键-&gt;属性-&gt;数字签名 来判断。</p><p>这里研究一下每种情形的校验方式 :</p><h3 id="对于校验和的验证"><a href="#对于校验和的验证" class="headerlink" title="对于校验和的验证"></a>对于校验和的验证</h3><p>这种最简单了，下载完之后对下载的文件做一个校验，和网页上给的校验和是否一致即可。在windows下可以通过 CertUtil  命令来获取:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">CertUtil -hashfile &lt;<span class="hljs-built_in">path to</span> <span class="hljs-built_in">file</span>&gt; &lt;hash algorithm&gt;<br></code></pre></td></tr></table></figure><p>比如在  <a href="https://gpg4win.org/download.html">https://gpg4win.org/download.html</a> 下载 Gpg4win ，网页上给出的校验和：<br>  <img src="/2023/12/20/%E5%AF%B9%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C%E7%9A%84%E6%96%B9%E6%B3%95/001.png" class=""></p><p>下载下来后自己计算 SHA256 就行了，因为 windows 下计算命令 CertUtil 比起 linux 要麻烦一些，可以写一个脚本，实现把文件拖过去就自动弹出计算对话框：<br>  <img src="/2023/12/20/%E5%AF%B9%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C%E7%9A%84%E6%96%B9%E6%B3%95/002.png" class=""><br>脚本代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">echo</span> 请输入选择:<br><span class="hljs-built_in">echo</span> 1: MD5<br><span class="hljs-built_in">echo</span> 2: SHA1<br><span class="hljs-built_in">echo</span> 3: SHA256<br><br><span class="hljs-built_in">set</span> /p num=<br><br><span class="hljs-built_in">echo</span>. <br><span class="hljs-built_in">echo</span>. <br><span class="hljs-built_in">echo</span>. <br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%num%&quot;</span>==<span class="hljs-string">&quot;1&quot;</span> (<br>certutil -hashfile <span class="hljs-string">&quot;%~n1%~x1&quot;</span> MD5 <br>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%num%&quot;</span>==<span class="hljs-string">&quot;2&quot;</span> (<br>certutil -hashfile <span class="hljs-string">&quot;%~n1%~x1&quot;</span> SHA1 <br>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%num%&quot;</span>==<span class="hljs-string">&quot;3&quot;</span> (<br>certutil -hashfile <span class="hljs-string">&quot;%~n1%~x1&quot;</span> SHA256 <br>)<br><br>pause<br></code></pre></td></tr></table></figure><p>通过上面的计算可以看出软件 gpg4win-4.2.0.exe 是没问题的，这是一个官方的 Windows GnuPG 发行版，这个软件 GPG（GnuPG）是一个实现了 OpenPGP 标准的用于数据加密和数字签名的工具。属于全家桶软件，其中包括 GUI 客户端 Kleopatra，用来实现对 GPG密钥签名文件（sig）的校验。</p><p>参考链接：<br><a href="https://shansan.top/2021/07/10/checksum-gpg-tools/">对下载软件&#x2F;文件进行校验的工具（Checksum and GPG）</a></p>]]></content>
    
    
    <categories>
      
      <category>系统管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ICP入门之创建Internet Identity</title>
    <link href="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/"/>
    <url>/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/</url>
    
    <content type="html"><![CDATA[<p>2021年 5 月 10 日，互联网计算机（简称 IC）主网正式上线，在上线当天其背后孵化组织 DFINITY 基金会也推出了与 IC 网络底层密码学技术 Chain Key 对应的原生身份验证框架 Internet Identity（简称 ii）。</p><h2 id="什么是Internet-Identity"><a href="#什么是Internet-Identity" class="headerlink" title="什么是Internet Identity"></a>什么是Internet Identity</h2><p>Internet Identity”（互联网身份）是指个体在网络空间的身份标识和表现形式。它不仅涉及到用户的个人信息和在线行为，还包括用户在网络上的各种互动、交易和数字资产。在Web3环境下，Internet Identity 强调去中心化和用户隐私，利用区块链等技术保护用户身份的安全和隐私，同时提供更灵活、透明的身份管理和认证方式。这一概念是理解数字世界中个人与社会互动的关键。</p><h2 id="Internet-Identity如何运作"><a href="#Internet-Identity如何运作" class="headerlink" title="Internet Identity如何运作"></a>Internet Identity如何运作</h2><p>ii 身份验证框架利用 Web 身份验证 (WebAuthn) API 使用智能合约为 Internet computer 上运行的应用程序提供安全的加密身份验证。 Internet Identity 使您能够使用内置于智能手机或笔记本电脑中的安全芯片或插入计算机USB端口的 安全密钥 来验证您的身份并授权访问应用程序。</p><h2 id="如何创建Internet-Identity"><a href="#如何创建Internet-Identity" class="headerlink" title="如何创建Internet Identity"></a>如何创建Internet Identity</h2><ol><li><p>转到 <a href="https://identity.ic0.app/">Internet Identity</a> 点击 Create Passkey<br>   <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/001.png" class="" title="Passkey"></p></li><li><p>弹出一个对话框提示设置 安全密钥<br>   <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/002.png" class=""><br>这里插入USB安全密钥 Yunbikey, 并手动选择<br> 参考:  <a href="https://developers.google.com/codelabs/webauthn-2fa-key#0">使用安全密钥 (WebAuthn) 进行双重身份验证</a><br>ii 身份所使用的 WebAuthn 是安全密钥最基础的功能,几乎无需配置，在 Firefox 和 Chrome 上均能够做到开箱即用</p></li><li><p>输入安全密钥的 PIN:<br>   <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/003.png" class=""><br> 至此就成功创建了一个 lnternet ldentlty，并得到了用户编号<br>   <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/004.png" class=""></p></li></ol><p>前面使用 YubiKey 在 Internet Identity 上进行 WebAuthn 注册时，YubiKey 会自动为其生成一个独立的密钥对（公钥和私钥）。将公钥发送到网站，私钥则安全地存储在 YubiKey 内部。这个过程对用户是透明的，不需要用户直接干预。YubiKey 设计有足够的存储空间来保存数百甚至更多的这样的密钥对。</p><p>在 WebAuthn（FIDO2）协议中，私钥是生成并存储在 YubiKey 设备内部的，并且从未离开设备(被设计为不可导出和不可直接查看)。这是一种安全措施，确保私钥不被泄露或外部访问。由于 WebAuthn 密钥的私有性和安全性，它们通常不会在 YubiKey Manager 或其他管理工具中显示。这意味着用户无法直接查看、访问或管理这些密钥。这种设计是为了保护用户的安全和隐私。通过不允许用户（或任何人）访问密钥，减少了密钥被盗用或误用的风险。</p><p>这样在保证安全性的同时也带来了一个问题，那就是存储 安全密钥 的硬件本体的丢失意味着将永远无法完成验证，为了解决这个问题 Internet Identity 提供了多种备份方法，这里单独介绍其助记词方式：</p><p>第一次登录的时候会有个引导页面, 提示创建 Recovery Phrase<br>         <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/005.png" class=""><br>点击创建之后会给出 24 个助记词 和 用户编号.<br>         <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/006.png" class=""><br> 对于24个助记词必须要做到:<br>1)只能自己知道，不可泄露给别人，否则别人就可以通过助记词取走资产<br>2)助记词不能丢失，否则安全密钥丢失就没有办法恢复了，资产也就丢失。</p><p>当丢失安全密钥的时候（比如说 YubiKey丢失），就在登录页面点击 Lost access ，然后选择 Use recovery phrase 即可<br>         <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/007.png" class=""><br>         <img src="/2023/12/20/ICP%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9B%E5%BB%BAInternet-Identity/008.png" class=""></p><p>参考链接：</p><p><a href="https://blog.csdn.net/lk2684753/article/details/118224251">Dfinity(ICP)身份认证和账本快速入门-3</a></p>]]></content>
    
    
    <categories>
      
      <category>web3开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖NAS使用Docker安装gitlab服务器</title>
    <link href="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>  有时候需要搭建自己的 git 服务器，因为1)项目比较大，如果用github 同步很耗费时间。  2)不想让别人看到自己的代码。  多方研究选择了gitlab 。</p><p>群晖其实自带一个叫 Git Server 的套件，不过没有图形界面，而且还要开放ssh端口（ssh端口开放容易被攻击），配置很繁杂，不建议使用，建议使用Docker配合gitlab-ce来搭建。</p><p>  我看有的教程推荐用中文版的 gitlab-ce-zh 亲测用这个启动docker老是失败，找不到原因，换成英文版的就行了。</p><p>  Gitlab依赖很多，启动速度很慢，而且比较耗资源，如果NAS的配置较差的话，建议不要安装了。</p>  <img src="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/001.jpg" class="" title="资源占用"><p>下载Gitlab镜像<br>  首先打开 Docker 套件，搜索 gitlab-ce，然后双击安装，选择 latest 最新版，现在映像已经到3个G了需要等好一会才能下载完。</p>  <img src="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/002.jpg" class="">  <img src="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/002-1.jpg" class=""><p>配置并启动Gitlab容器<br>   首先需要把相关目录建立起来，参考文档配置，本地设置根目录配置为&#x2F;docker&#x2F;gitlab，新建目录</p><p>配置路径映射</p><p>本地路径              容器路径           说明<br>&#x2F;docker&#x2F;gitlab&#x2F;data    &#x2F;var&#x2F;opt&#x2F;gitlab     数据目录<br>&#x2F;docker&#x2F;gitlab&#x2F;logs    &#x2F;var&#x2F;log&#x2F;gitlab     日志目录<br>&#x2F;docker&#x2F;gitlab&#x2F;config&#x2F;etc&#x2F;gitlab         配置文件等</p>  <img src="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/003.jpg" class=""><p>配置端口映射，其他端口可以不改变，配置一个需要使用的web端端口。</p>  <img src="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/004.jpg" class=""><p>Gitlab启动速度很慢，需要耐心等待。</p><p>  配置启动好之后，可以通过 <a href="http://nas_ip_or_domain:5080/">http://nas_ip_or_domain:5080/</a>  来访问。</p><p>启动慢访问可能是404（直接无法访问），稍后可以得到502页面，再等等就好了。</p><p>启动完成后得到登录页面：</p><p>账号：root</p><p>密码：是docker生成的可以参考 <a href="https://blog.csdn.net/cirea1987/article/details/120178421">docker gitlab 初始密码查看</a>  来获取，登录之后修改密码。</p>  <img src="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/005.jpg" class="">  <img src="/2023/02/20/%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/006.jpg" class=""><p>然后就可以 使用 git 了，创建project,提交代码， 第一次提交的时候要输入用户名和密码。</p><p>  如果还想了解更多的使用方式可以参考如下文章 比如说使用邮箱功能，这里因为是给自己使用的就不配置了。<br><a href="https://fugary.com/?p=304">群晖NAS搭建私有Gitlab仓库</a><br><a href="https://github.com/shaobeichen/blog/issues/11">Gitlab强制推送提示”You are not allowed to force push code to a protected branch on this project</a><br><a href="https://www.weizhiyong.com/archives/1604">群晖使用Docker安装并配置GitLab服务器</a></p>]]></content>
    
    
    <categories>
      
      <category>系统管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python脚本下载 youtube 视频</title>
    <link href="/2023/02/11/%E4%BD%BF%E7%94%A8python%E8%84%9A%E6%9C%AC%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/"/>
    <url>/2023/02/11/%E4%BD%BF%E7%94%A8python%E8%84%9A%E6%9C%AC%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">尝试了很多次群晖的下载youtube视频的docker，无奈各种原因总是配置不成功。只能自己在docker里面搭建 python 和ffmpeg环境。</code></pre><p>Ubuntu 22.04 里面已经安装 python3 了，不过pip3没有安装，需要手动安装。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install python3-pip<br></code></pre></td></tr></table></figure><p>tips: 给docker共享文件夹：</p><img src="/2023/02/11/%E4%BD%BF%E7%94%A8python%E8%84%9A%E6%9C%AC%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/001.jpg" class="" title="docker存储空间设置"><p>拷贝过去文件 ytube.py :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pytube <span class="hljs-keyword">import</span> YouTube<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> re<br><span class="hljs-comment">#from pywebio.input import *</span><br><br>temp_video = <span class="hljs-string">&quot;&quot;</span><br>temp_audio = <span class="hljs-string">&quot;&quot;</span><br>base_dir = <span class="hljs-string">&#x27;/home/share&#x27;</span><br><br>proxy_handler = &#123;<br><span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://192.168.50.35:7890&quot;</span>,<br><span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&quot;http://192.168.50.35:7890&quot;</span>,<br><span class="hljs-string">&quot;socks5&quot;</span>:<span class="hljs-string">&quot;socks5://192.168.50.35:7891&quot;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onComplete</span>(<span class="hljs-params">stream, file_path</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;onComplete:   &#x27;</span> + file_path)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onProgress</span>(<span class="hljs-params">stream, chunk, remains</span>):<br>    total = stream.filesize<br>    percent = (total-remains) / total * <span class="hljs-number">100</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;  &#123;:05.2f&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(percent)  )<br>    <span class="hljs-comment">#print (&#x27;下載中… &#123;:05.2f&#125;%&#x27;.format(percent), end=&#x27;\r&#x27; )</span><br>    <span class="hljs-keyword">return</span> <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_media</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        yt = YouTube(url, proxies=proxy_handler, on_progress_callback=onProgress,on_complete_callback=onComplete)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;下載影片時發生錯誤，請確認網路連線和YouTube網址無誤。&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment">#filter = yt.streams.filter</span><br><br>    <span class="hljs-keyword">global</span> temp_video,temp_audio<br>    temp_video = os.path.join(base_dir, <span class="hljs-string">&#x27;video_out.mp4&#x27;</span>)<br>    temp_audio = os.path.join(base_dir, <span class="hljs-string">&#x27;audio_out.mp4&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(temp_video)<br>    <span class="hljs-built_in">print</span>(temp_audio)<br>    <br>    count = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment">#download audio only</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try downnload audio&#x27;</span>)<br>            yt.streams.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;audio&quot;</span>,abr=<span class="hljs-string">&quot;128kbps&quot;</span>).first().download(filename=temp_audio)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            os.remove(temp_audio)<br>            count += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment">#download video only</span><br>    video_strem = yt.streams.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video&quot;</span>, res=<span class="hljs-string">&quot;1080p&quot;</span>).first()<br>    <span class="hljs-keyword">if</span> video_strem <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        video_strem = yt.streams.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video&quot;</span>, res=<span class="hljs-string">&quot;720p&quot;</span>).first()<br>    <span class="hljs-keyword">if</span> video_strem <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        video_strem = yt.streams.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video&quot;</span>, res=<span class="hljs-string">&quot;480p&quot;</span>).first()<br><br>    count = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try downnload video&#x27;</span>)<br>            video_strem.download(filename=temp_video)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            os.remove(temp_video)<br>            count += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;downnload video failed!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <br>    ori_name = yt.title<br>    <span class="hljs-comment">#ori_name = re.sub(r&#x27;[.,&quot;\&#x27;-?:!;]&#x27;, &#x27;&#x27;, ori_name)</span><br>    merge_media(ori_name + <span class="hljs-string">&quot;.mp4&quot;</span>)<br>    os.remove(temp_audio)<br>    os.remove(temp_video)<br><br>    <span class="hljs-comment">## 把音频和视频合并起来成一个文件，如果像下面一样用 ffmpeg 的 python 接口，则导致耗时很长，</span><br>    <span class="hljs-comment">## 长达 ffmpeg命令方式 的几十倍，可能它们的实现方式不一样，这里不深究了。</span><br>    <span class="hljs-comment"># import ffmpeg</span><br>    <span class="hljs-comment"># video = ffmpeg.input(&quot;video.mp4&quot;)</span><br>    <span class="hljs-comment"># audio = ffmpeg.input(&quot;audio.mp4&quot;)</span><br>    <span class="hljs-comment"># ffmpeg.output(audio, video, &quot;finished_video.mp4&quot;).run(overwrite_output=True)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_media</span>(<span class="hljs-params">out_name</span>):<br>    <span class="hljs-keyword">global</span> temp_video,temp_audio<br>    temp_output = os.path.join(base_dir, out_name)<br>    <span class="hljs-built_in">print</span>(temp_output)<br>    cmd = <span class="hljs-string">f&#x27;ffmpeg -i <span class="hljs-subst">&#123;temp_video&#125;</span> -i <span class="hljs-subst">&#123;temp_audio&#125;</span>  -map 0:v -map 1:a   -c copy -y \&#x27;<span class="hljs-subst">&#123;temp_output&#125;</span>\&#x27;&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        subprocess.run(cmd, shell=<span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;音视频合并完成&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;音视频合并失败&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./src.txt&quot;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    lines = file.readlines()<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>        download_media(line)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>创建一个空文件src.txt ,把需要下载的ytube视频链接放在这个txt里面。</p><p>给ubuntu 安装 ffmpeg 以供转码需要，</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install ffmpeg<br></code></pre></td></tr></table></figure><p>  代码说明：<br>1)一般下载工具1080p是没有音频的，720p及以下才有音频，这是由youtube的DASH Streams 特性决定的。这里把1080p视频 和音频合并，所以要比大多数下载工具要好一些。<br>2)对于音频流选择 mp4a.xxx 而不是 opus ，方便后面合并音视频，<br>3)合并音视频 选择 ffmpeg 命令方式而不是用 ffmpeg.input ffmpeg.output方法，那样会用很长时间，cpu占用率也很高，具体原因就不研究了。<br>4)proxy_handler 是代理设置，这里用的是软路由的地址。需要根据自己情况修改。</p><p>参考链接：</p><p><a href="https://swf.com.tw/?p=1402">YouTube影片下載（五）：PyTube3程式庫更新說明</a><br><a href="https://www.jianshu.com/p/e18cdb1053d0">python下载youtube视频</a><br><a href="https://haibei.online/posts/3728898916#github%E5%9C%B0%E5%9D%80">pytube，下载YouTube视频无压力</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在群晖上创建ubuntu docker容器并用ssh访问</title>
    <link href="/2023/02/08/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%88%9B%E5%BB%BAubuntu-docker%E5%AE%B9%E5%99%A8%E5%B9%B6%E7%94%A8ssh%E8%AE%BF%E9%97%AE/"/>
    <url>/2023/02/08/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%88%9B%E5%BB%BAubuntu-docker%E5%AE%B9%E5%99%A8%E5%B9%B6%E7%94%A8ssh%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p>   有时候用一个 python 脚本完成某个工作，为了不让这个python的环境影响别的工程，只能给这个python 脚本单独准备一个运行环境，<br>如果是虚拟机环境占用资源比较多，而且群晖cpu功能较弱，无法同时开启很多虚拟机，此时只能选择docker。<br>   首先准备ubuntu 映像，这里选择 dokken&#x2F;ubuntu22.04 </p><img src="/2023/02/08/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%88%9B%E5%BB%BAubuntu-docker%E5%AE%B9%E5%99%A8%E5%B9%B6%E7%94%A8ssh%E8%AE%BF%E9%97%AE/001.jpg" class="" title="ubuntu映像"><p>   使用这个映像创建出一个容器，网卡就选择普通的 bridge 就行了。注意映射下 22 端口。</p><img src="/2023/02/08/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%88%9B%E5%BB%BAubuntu-docker%E5%AE%B9%E5%99%A8%E5%B9%B6%E7%94%A8ssh%E8%AE%BF%E9%97%AE/002.jpg" class="" title="端口"><p>   刚创建出来的容器还没有安装ssh ，首先安装 ssh-server</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">apt-get install openssh-server<br></code></pre></td></tr></table></figure><p>   详细可以参考文章 <a href="https://blog.csdn.net/jackghq/article/details/54974141">ubuntu开启SSH服务远程登录</a></p><p>   执行 ‘passwd’ 命令，修改 root 密码</p><p>   安装完ssh并且启动ssh服务之后，ssh连接依然提示 ‘Permission denied’ ,经过搜索原来是配置了 禁止root登录策略。<br>把 ‘&#x2F;etc&#x2F;ssh&#x2F;sshd_config’ 里面的配置 ‘PermitRootLogin no’ 改为YES，重启 ssh服务 即可.</p><img src="/2023/02/08/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%88%9B%E5%BB%BAubuntu-docker%E5%AE%B9%E5%99%A8%E5%B9%B6%E7%94%A8ssh%E8%AE%BF%E9%97%AE/003.jpg" class="" title="配置"><p>参考文章 ：<a href="https://cloud.tencent.com/developer/article/1454777">SSH连接报错:Permission denied, please try again.的解决方法</a></p><p>   此时可以登录，但是在输入密码之后需要等待十几秒钟才可以连接上，这个问题就比较棘手了，google 搜索了很久才找到答案。<br>修改配置文件 ‘&#x2F;etc&#x2F;pam.d&#x2F;common-session’ 注释掉 ‘pam_systemd.so’ 这一样就行了  无需重启。</p><img src="/2023/02/08/%E5%9C%A8%E7%BE%A4%E6%99%96%E4%B8%8A%E5%88%9B%E5%BB%BAubuntu-docker%E5%AE%B9%E5%99%A8%E5%B9%B6%E7%94%A8ssh%E8%AE%BF%E9%97%AE/004.jpg" class="" title="pam_systemd"><p>参考文章 ： <a href="https://jrs-s.net/2017/07/01/slow-ssh-logins/">A comprehensive guide to fixing slow SSH logins</a></p><p>至此，ssh 登录ubuntu docker容器终于正常了。</p>]]></content>
    
    
    <categories>
      
      <category>系统管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖Docker设置bridge-host模式</title>
    <link href="/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>  首先群晖默认网络模式是bridge模式和host模式,我们将开启的网络模式是 bridge-host 模式。<br>  <img src="/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/001.jpg" class="" title="群晖网络模式"></p><p>Bridge: docker容器内部虚拟网桥，容器内部 172.17.0.X 网段 无法获取主机网络 ip 访问容器需要映射端口 并且不能和主机占用端口冲突 不映射端口无法使用</p><p>Host：host模式 将容器绑定到主机网卡使用主机的ip 并且不能和主机占用端口冲突 使用哪些端口自动占用</p><p>bridge-host：通过主机的虚拟网卡来创建虚拟网桥 将容器的网卡绑定到这个直通局域网的虚拟网桥上</p><p>优点：容器获取到局域网ip， 容器ip和群晖主机一个网段，端口 1-65535 全端口使用 不和主机冲突 ip手动指定</p><p>可以说 bridge-host 模式就是把容器都桥接到你群晖所在的局域网</p><p>开启bridge-host网络方法：</p><p>一.群晖相关设置</p><ol><li>打开群晖控制面板 ——网络——网络界面——管理——Open vSwitch设置</li></ol>  <img src="/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/002.jpg" class="" title="网络配置">  <img src="/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/003.jpg" class="" title="网络配置"><ol start="2"><li>群晖控制面板——终端机和SNMP——开启SSH功能  <img src="/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/004.jpg" class="" title="网络配置"></li></ol><p>二.执行命令<br>3. 用putty工具SSH登录进群晖并切换到root账户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo -<span class="hljs-selector-tag">i</span><br></code></pre></td></tr></table></figure><ol start="4"><li>执行创建网络命令，根据自己的IP网段修改，我的IP网段为 192.168.50.X，网关地址为 192.168.50.35<br>  这里网关设置为旁路由的网关（因为 docker 运行的时候同在群晖上的 openwrt旁路由 也必然运行。）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker network create -d macvlan <span class="hljs-attr">--subnet</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">50.0</span>/<span class="hljs-number">24</span> <span class="hljs-attr">--gateway</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">50.35</span> -o parent=ovs_eth0 bridge-host<br></code></pre></td></tr></table></figure></li></ol><p>创建容器的时候注意选择 bridge-host 模式</p> <img src="/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/005.jpg" class="" title="bridge-host"><p>注意如果要在docker里面使用 ifconfig 配置网络会提示没权限(即便是用root用户) ，是因为创建容器的时候没有选择  使用高权限执行容器。</p><img src="/2023/02/05/%E7%BE%A4%E6%99%96Docker%E8%AE%BE%E7%BD%AEbridge-host%E6%A8%A1%E5%BC%8F/006.jpg" class="" title="使用高权限执行容器"><p>参考网络文章:</p><p><a href="https://www.zhoujie218.top/archives/1018.html">群晖docker开启局域网桥接，获取独立IP</a><br><a href="https://icn.ink/synology/3.html">群晖Docker设置bridge-host模式</a></p>]]></content>
    
    
    <categories>
      
      <category>系统管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下使用keysmith实现icp转账</title>
    <link href="/2022/07/24/linux%E4%B8%8B%E4%BD%BF%E7%94%A8keysmith%E5%AE%9E%E7%8E%B0icp%E8%BD%AC%E8%B4%A6/"/>
    <url>/2022/07/24/linux%E4%B8%8B%E4%BD%BF%E7%94%A8keysmith%E5%AE%9E%E7%8E%B0icp%E8%BD%AC%E8%B4%A6/</url>
    
    <content type="html"><![CDATA[<p>  早期的icp各种钱包 通过同样的一组私钥生成的地址是不一样的，比如Stoic Wallet和plug，但是 plug 和 keysmith 工具生成的地址是一样的， 本视频介绍使用keysmith来创建icp地址和转账。</p><iframe src="//www.youtube.com/embed/EHzHwDN9HEs" frameborder="0" allowfullscreen=""></iframe><p>本文提到的链接：<br><a href="https://github.com/dfinity/keysmith">https://github.com/dfinity/keysmith</a></p>]]></content>
    
    
    <categories>
      
      <category>web3开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1970/01/01/hello-world/"/>
    <url>/1970/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
